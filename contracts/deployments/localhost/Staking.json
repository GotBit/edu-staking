{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MAX_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc39af85dfeb10395a07b15ccc6cf89c8fbb129a04db056b562215dfde4dab3c4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "673318",
    "logsBloom": "0x
    "blockHash": "0x7d077f73ce7cd1cd88da1dcefd676c62cae7d2345750b007a2d14aeb29b162c8",
    "transactionHash": "0xc39af85dfeb10395a07b15ccc6cf89c8fbb129a04db056b562215dfde4dab3c4",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "673318",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "e9c343f0b42f476c2197e28bf664dc11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MAX_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\ncontract Staking {\\n    using SafeERC20 for IERC20;\\n\\n    struct Stake {\\n        uint256 startTimestamp;\\n        uint256 amount;\\n        uint256 reward;\\n    }\\n\\n    address public bank;\\n    IERC20 public token;\\n    uint256 public rate = 15;\\n    uint256 public MAX_REWARD = 1000 ether;\\n\\n    mapping(address => Stake) public stakes;\\n\\n    constructor(IERC20 token_) {\\n        token = token_;\\n        bank = msg.sender;\\n    }\\n\\n    function stake(uint256 amount) external {\\n        require(stakes[msg.sender].startTimestamp == 0, 'You have had already stake');\\n        require(\\n            token.balanceOf(address(this)) > MAX_REWARD,\\n            'Not enough tokens on contract'\\n        );\\n\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        stakes[msg.sender] = Stake({\\n            startTimestamp: block.timestamp,\\n            amount: amount,\\n            reward: 0\\n        });\\n    }\\n\\n    function harvest() public {\\n        uint256 reward_ = getReward(msg.sender);\\n        require(reward_ > 0, 'You dont have any reward');\\n        stakes[msg.sender].reward += reward_;\\n        token.safeTransfer(msg.sender, reward_);\\n    }\\n\\n    function unstake() external {\\n        // harvest(); // mistake\\n        if (getReward(msg.sender) > 0) harvest();\\n        uint256 amount = stakes[msg.sender].amount;\\n        stakes[msg.sender] = Stake({startTimestamp: 0, amount: 0, reward: 0});\\n        token.safeTransfer(msg.sender, amount);\\n    }\\n\\n    function getReward(address user) public view returns (uint256) {\\n        if (stakes[user].startTimestamp == 0) return 0;\\n        uint256 period = (block.timestamp - stakes[user].startTimestamp) / 10;\\n        uint256 reward = (rate * period * stakes[user].amount) / 100;\\n        return (reward > MAX_REWARD ? MAX_REWARD : reward) - stakes[msg.sender].reward;\\n    }\\n}\\n\",\"keccak256\":\"0x5b7f5b5a4a875413132858a9b84aee40cab1e5c45121e313548568737bbef10b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600f600255683635c9adc5dea0000060035534801561002257600080fd5b50604051610a40380380610a408339810160408190526100419161006f565b600180546001600160a01b039092166001600160a01b0319928316179055600080549091163317905561009f565b60006020828403121561008157600080fd5b81516001600160a01b038116811461009857600080fd5b9392505050565b610992806100ae6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634641257d116100665780634641257d1461011157806376cdb03b14610119578063a694fc3a14610144578063c00007b014610157578063fc0c546a1461016a57600080fd5b80630e1505e01461009857806316934fc4146100b45780632c4e722e146100fe5780632def662014610107575b600080fd5b6100a160035481565b6040519081526020015b60405180910390f35b6100e36100c23660046107de565b60046020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016100ab565b6100a160025481565b61010f61017d565b005b61010f6101fd565b60005461012c906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b61010f610152366004610807565b61029d565b6100a16101653660046107de565b61040b565b60015461012c906001600160a01b031681565b60006101883361040b565b1115610196576101966101fd565b336000818152600460208181526040808420600180820180548451606081018652888152808701898152958101898152988a9052969095529451825591519093559251600290920191909155905490916101fa916001600160a01b031690836104e3565b50565b60006102083361040b565b90506000811161025f5760405162461bcd60e51b815260206004820152601860248201527f596f7520646f6e74206861766520616e7920726577617264000000000000000060448201526064015b60405180910390fd5b3360009081526004602052604081206002018054839290610281908490610836565b90915550506001546101fa906001600160a01b031633836104e3565b33600090815260046020526040902054156102fa5760405162461bcd60e51b815260206004820152601a60248201527f596f7520686176652068616420616c7265616479207374616b650000000000006044820152606401610256565b6003546001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610369919061084e565b116103b65760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e73206f6e20636f6e74726163740000006044820152606401610256565b6001546103ce906001600160a01b031633308461054b565b6040805160608101825242815260208082019384526000828401818152338252600490925292909220905181559151600183015551600290910155565b6001600160a01b03811660009081526004602052604081205461043057506000919050565b6001600160a01b038216600090815260046020526040812054600a906104569042610867565b610460919061087e565b6001600160a01b0384166000908152600460205260408120600101546002549293509091606491906104939085906108a0565b61049d91906108a0565b6104a7919061087e565b336000908152600460205260409020600201546003549192509082116104cd57816104d1565b6003545b6104db9190610867565b949350505050565b6040516001600160a01b03831660248201526044810182905261054690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610589565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526105839085906323b872dd60e01b9060840161050f565b50505050565b60006105de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661065b9092919063ffffffff16565b80519091501561054657808060200190518101906105fc91906108bf565b6105465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610256565b606061066a8484600085610674565b90505b9392505050565b6060824710156106d55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610256565b6001600160a01b0385163b61072c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610256565b600080866001600160a01b03168587604051610748919061090d565b60006040518083038185875af1925050503d8060008114610785576040519150601f19603f3d011682016040523d82523d6000602084013e61078a565b606091505b509150915061079a8282866107a5565b979650505050505050565b606083156107b457508161066d565b8251156107c45782518084602001fd5b8160405162461bcd60e51b81526004016102569190610929565b6000602082840312156107f057600080fd5b81356001600160a01b038116811461066d57600080fd5b60006020828403121561081957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561084957610849610820565b500190565b60006020828403121561086057600080fd5b5051919050565b60008282101561087957610879610820565b500390565b60008261089b57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108ba576108ba610820565b500290565b6000602082840312156108d157600080fd5b8151801515811461066d57600080fd5b60005b838110156108fc5781810151838201526020016108e4565b838111156105835750506000910152565b6000825161091f8184602087016108e1565b9190910192915050565b60208152600082518060208401526109488160408501602087016108e1565b601f01601f1916919091016040019291505056fea2646970667358221220020827005aac1e89e6ccde612c4cf9aa8e362878cc5d027a1e7afd515af8216164736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80634641257d116100665780634641257d1461011157806376cdb03b14610119578063a694fc3a14610144578063c00007b014610157578063fc0c546a1461016a57600080fd5b80630e1505e01461009857806316934fc4146100b45780632c4e722e146100fe5780632def662014610107575b600080fd5b6100a160035481565b6040519081526020015b60405180910390f35b6100e36100c23660046107de565b60046020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016100ab565b6100a160025481565b61010f61017d565b005b61010f6101fd565b60005461012c906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b61010f610152366004610807565b61029d565b6100a16101653660046107de565b61040b565b60015461012c906001600160a01b031681565b60006101883361040b565b1115610196576101966101fd565b336000818152600460208181526040808420600180820180548451606081018652888152808701898152958101898152988a9052969095529451825591519093559251600290920191909155905490916101fa916001600160a01b031690836104e3565b50565b60006102083361040b565b90506000811161025f5760405162461bcd60e51b815260206004820152601860248201527f596f7520646f6e74206861766520616e7920726577617264000000000000000060448201526064015b60405180910390fd5b3360009081526004602052604081206002018054839290610281908490610836565b90915550506001546101fa906001600160a01b031633836104e3565b33600090815260046020526040902054156102fa5760405162461bcd60e51b815260206004820152601a60248201527f596f7520686176652068616420616c7265616479207374616b650000000000006044820152606401610256565b6003546001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610345573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610369919061084e565b116103b65760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f75676820746f6b656e73206f6e20636f6e74726163740000006044820152606401610256565b6001546103ce906001600160a01b031633308461054b565b6040805160608101825242815260208082019384526000828401818152338252600490925292909220905181559151600183015551600290910155565b6001600160a01b03811660009081526004602052604081205461043057506000919050565b6001600160a01b038216600090815260046020526040812054600a906104569042610867565b610460919061087e565b6001600160a01b0384166000908152600460205260408120600101546002549293509091606491906104939085906108a0565b61049d91906108a0565b6104a7919061087e565b336000908152600460205260409020600201546003549192509082116104cd57816104d1565b6003545b6104db9190610867565b949350505050565b6040516001600160a01b03831660248201526044810182905261054690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610589565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526105839085906323b872dd60e01b9060840161050f565b50505050565b60006105de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661065b9092919063ffffffff16565b80519091501561054657808060200190518101906105fc91906108bf565b6105465760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610256565b606061066a8484600085610674565b90505b9392505050565b6060824710156106d55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610256565b6001600160a01b0385163b61072c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610256565b600080866001600160a01b03168587604051610748919061090d565b60006040518083038185875af1925050503d8060008114610785576040519150601f19603f3d011682016040523d82523d6000602084013e61078a565b606091505b509150915061079a8282866107a5565b979650505050505050565b606083156107b457508161066d565b8251156107c45782518084602001fd5b8160405162461bcd60e51b81526004016102569190610929565b6000602082840312156107f057600080fd5b81356001600160a01b038116811461066d57600080fd5b60006020828403121561081957600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561084957610849610820565b500190565b60006020828403121561086057600080fd5b5051919050565b60008282101561087957610879610820565b500390565b60008261089b57634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156108ba576108ba610820565b500290565b6000602082840312156108d157600080fd5b8151801515811461066d57600080fd5b60005b838110156108fc5781810151838201526020016108e4565b838111156105835750506000910152565b6000825161091f8184602087016108e1565b9190910192915050565b60208152600082518060208401526109488160408501602087016108e1565b601f01601f1916919091016040019291505056fea2646970667358221220020827005aac1e89e6ccde612c4cf9aa8e362878cc5d027a1e7afd515af8216164736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1290,
        "contract": "contracts/Staking.sol:Staking",
        "label": "bank",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1293,
        "contract": "contracts/Staking.sol:Staking",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 1296,
        "contract": "contracts/Staking.sol:Staking",
        "label": "rate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1299,
        "contract": "contracts/Staking.sol:Staking",
        "label": "MAX_REWARD",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1304,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Stake)1288_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Stake)1288_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1288_storage"
      },
      "t_struct(Stake)1288_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Stake",
        "members": [
          {
            "astId": 1283,
            "contract": "contracts/Staking.sol:Staking",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1285,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1287,
            "contract": "contracts/Staking.sol:Staking",
            "label": "reward",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}