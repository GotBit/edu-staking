/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DexHelperInterface extends ethers.utils.Interface {
  functions: {
    "convert(address,address,address,uint256)": FunctionFragment;
    "isBuyDex(address,address,address,address,address)": FunctionFragment;
    "isSellDex(address,address,address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBuyDex",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isSellDex",
    values: [string, string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBuyDex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSellDex", data: BytesLike): Result;

  events: {};
}

export class DexHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DexHelperInterface;

  functions: {
    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isBuyDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSellDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  convert(
    router: string,
    token0: string,
    token1: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isBuyDex(
    sender: string,
    from: string,
    to: string,
    router: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSellDex(
    sender: string,
    from: string,
    to: string,
    router: string,
    pair: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBuyDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSellDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBuyDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSellDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    convert(
      router: string,
      token0: string,
      token1: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBuyDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSellDex(
      sender: string,
      from: string,
      to: string,
      router: string,
      pair: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
