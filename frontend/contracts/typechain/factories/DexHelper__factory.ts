/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DexHelper, DexHelperInterface } from "../DexHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "convert",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "isBuyDex",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    name: "isSellDex",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610adc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806320dc27c214610046578063383d45cb14610076578063eba39857146100a6575b600080fd5b610060600480360381019061005b9190610690565b6100d6565b60405161006d9190610706565b60405180910390f35b610090600480360381019061008b9190610721565b6103f7565b60405161009d91906107b7565b60405180910390f35b6100c060048036038101906100bb9190610721565b6104ee565b6040516100cd91906107b7565b60405180910390f35b60006101047f219ae8aec300fe26e11406aedf527fd369e74b3089850e95897efa35ba53a40660001b6105e5565b6101307fad0a1e6c385e600ffa34480b89bf858194e868e57477489a8f982ceabe03181760001b6105e5565b61015c7f135913d9af180f9b90962f81a87d8d1102ea8dd77bcf9f3dd3d05e60a28e321560001b6105e5565b6000600267ffffffffffffffff811115610179576101786107d2565b5b6040519080825280602002602001820160405280156101a75781602001602082028036833780820191505090505b5090506101d67f94ac07c18536dba81d6dc73755cfe2e6fbccfcb871451e95a96a903e74fb181d60001b6105e5565b6102027f71b547c7dfd73879eab4359338d6343ab16e0d0d37dcb123df177f3e7103f80a60001b6105e5565b848160008151811061021757610216610801565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061027d7fa9750f0d0087763d41b811dd1fbc04e6c5f66125db6e008655518ae852ea2b5660001b6105e5565b6102a97f3bbfcec05c4586d063361d18bf11cfc1b7124392730a99a69f4569b2c8fec87560001b6105e5565b83816001815181106102be576102bd610801565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506103247fa60be9a89bebd7a6544d00f9e0190b183d0464be9ca518df2b1ace3502db56db60001b6105e5565b6103507f14ad919cf94e992a20c7bfe7939c3fad204e5b6d24557e438c516db106a47fc460001b6105e5565b8573ffffffffffffffffffffffffffffffffffffffff1663d06ca61f84836040518363ffffffff1660e01b815260040161038b9291906108ee565b600060405180830381865afa1580156103a8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103d19190610a5d565b6001815181106103e4576103e3610801565b5b6020026020010151915050949350505050565b60006104257f3862a7ce875ce4310e0908b438067763c37c2a409adeea2dd213eebc3233fb2060001b6105e5565b6104517fb898819e87a37dc469742e7723467d11830fe99c9c6ad85059a9c834c9239b2960001b6105e5565b61047d7f3770d6fcecb14972a6363a3a8bbe4c322a2acc5ffa28cc155d1cdb1805e8574b60001b6105e5565b8273ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480156104e357508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b905095945050505050565b600061051c7f8542120b560455e8c12b7edb8c16f370cc138b548d4ea4d6a40f096348f66e8b60001b6105e5565b6105487fa475507245f07c3227ef1d489ea6ca123705324529b791f9f799a52a7d1f63d560001b6105e5565b6105747fc1261af94d5ca8a5597b954fe74e9d140095e711c0bc97549cb98d1bdccfd12260001b6105e5565b8173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161480156105da57508173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b905095945050505050565b50565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610627826105fc565b9050919050565b6106378161061c565b811461064257600080fd5b50565b6000813590506106548161062e565b92915050565b6000819050919050565b61066d8161065a565b811461067857600080fd5b50565b60008135905061068a81610664565b92915050565b600080600080608085870312156106aa576106a96105f2565b5b60006106b887828801610645565b94505060206106c987828801610645565b93505060406106da87828801610645565b92505060606106eb8782880161067b565b91505092959194509250565b6107008161065a565b82525050565b600060208201905061071b60008301846106f7565b92915050565b600080600080600060a0868803121561073d5761073c6105f2565b5b600061074b88828901610645565b955050602061075c88828901610645565b945050604061076d88828901610645565b935050606061077e88828901610645565b925050608061078f88828901610645565b9150509295509295909350565b60008115159050919050565b6107b18161079c565b82525050565b60006020820190506107cc60008301846107a8565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6108658161061c565b82525050565b6000610877838361085c565b60208301905092915050565b6000602082019050919050565b600061089b82610830565b6108a5818561083b565b93506108b08361084c565b8060005b838110156108e15781516108c8888261086b565b97506108d383610883565b9250506001810190506108b4565b5085935050505092915050565b600060408201905061090360008301856106f7565b81810360208301526109158184610890565b90509392505050565b600080fd5b6000601f19601f8301169050919050565b61093d82610923565b810181811067ffffffffffffffff8211171561095c5761095b6107d2565b5b80604052505050565b600061096f6105e8565b905061097b8282610934565b919050565b600067ffffffffffffffff82111561099b5761099a6107d2565b5b602082029050602081019050919050565b600080fd5b6000815190506109c081610664565b92915050565b60006109d96109d484610980565b610965565b905080838252602082019050602084028301858111156109fc576109fb6109ac565b5b835b81811015610a255780610a1188826109b1565b8452602084019350506020810190506109fe565b5050509392505050565b600082601f830112610a4457610a4361091e565b5b8151610a548482602086016109c6565b91505092915050565b600060208284031215610a7357610a726105f2565b5b600082015167ffffffffffffffff811115610a9157610a906105f7565b5b610a9d84828501610a2f565b9150509291505056fea264697066735822122086c479a71a6b1c389d72625857d19701ae9aa6ef8cfd08f301c13c74c8fc25bc64736f6c634300080b0033";

export class DexHelper__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DexHelper> {
    return super.deploy(overrides || {}) as Promise<DexHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DexHelper {
    return super.attach(address) as DexHelper;
  }
  connect(signer: Signer): DexHelper__factory {
    return super.connect(signer) as DexHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DexHelperInterface {
    return new utils.Interface(_abi) as DexHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DexHelper {
    return new Contract(address, _abi, signerOrProvider) as DexHelper;
  }
}
